options {
    LOOKAHEAD = 2;
}
PARSER_BEGIN(Evaluator)

public class Evaluator {
    public static void main(String[] args) {
        try {
            new SyntaxChecker(new java.io.StringReader(args[0])).S();
            System.out.println("Syntax is okay");
        } catch (Throwable e) {
            // Catching Throwable is ugly but JavaCC throws Error objects!
            System.out.println("Syntax check failed: " + e.getMessage());
        }
    }
}

PARSER_END(Evaluator)

SKIP:  { " " | "\t" | "\n" | "\r"                    } // Skip whitespace
TOKEN: { "(" | ")" | "&&" | "||" | "->" | "<-" | "<->" | "!" | <VAR : (["A"-"Z"])> | <BOOL: (["T", "F"])> }

void S():   {} { result = BIJ() <EOF> { return result; }}
void BIJ(): {} { IMP() ("<->" BIJ())*  }
void IMP(): {} { OR()  ("->"  IMP())* }
void OR():  {} { AND() ("||"  OR() )* }
void AND(): {} { NOT() ("&&"  AND())* }
void NOT(): {} { "!" BOOL() | BOOL()  }
void BOOL(): {} { <VAR> | <BOOL> | "(" BIJ() ")" }

