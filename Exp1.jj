options {
    LOOKAHEAD = 2;
}
PARSER_BEGIN(Evaluator)

public class Evaluator {
    public static void main(String[] args) {
        try {
            System.out.println(new Evaluator(new java.io.StringReader(args[0])).S());
        } catch (Throwable e) {
            // Catching Throwable is ugly but JavaCC throws Error objects!
            System.out.println("Failed: " + e.getMessage());
        }
    }
}

PARSER_END(Evaluator)

SKIP:  { " " | "\t" | "\n" | "\r"                    } // Skip whitespace
TOKEN: { "(" | ")" | "&&" | "||" | "->" | "<-" | "<->" | "!" | <VAR : (["A"-"Z"])> | <BOOL: (["T", "F"])> }

boolean S():{ } {
    BIJ() <EOF> {
        return true;
    }
}

boolean BIJ(): { } {
    IMP() ("<->" BIJ())* {
        return true;
    }
}

boolean IMP(): { } {
    OR()  ("->"  IMP())* {
        return true;
    }
}

boolean OR():  { } {
    AND() ("||"  OR() )* {
        return true;
    }
}

boolean AND(): { } {
    NOT() ("&&"  AND())* {
        return true;
    }
}

boolean NOT(): { } {
    "!" BOOL() | BOOL() {
        return true;
    }
}

boolean BOOL(): { } {
    <VAR> {
        return true;
    }
    | <BOOL> {
        return true;
    }
    | "(" BIJ() ")" {
        return true;
    }
}

